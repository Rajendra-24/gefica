//
// File generated by rootcint at Thu Jul  7 10:25:54 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME GEFICA
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "GEFICA.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
      namespace GEFICA {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::GEFICA::Detector Detector;
      #else
      class Detector  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~Detector() throw() {};
         double voltage; //
         ::TF1* impurity; //
         ::GEFICA::Field* field; //
      };
      #endif
      } 
      namespace GEFICA {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::GEFICA::TrueCoaxial TrueCoaxial;
      #else
      class TrueCoaxial  :  public ::GEFICA::Detector {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~TrueCoaxial() throw() {};
         double ri; //
         double ro; //
      };
      #endif
      } 
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace GEFICA {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void GEFICA_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("GEFICA", 0 /*version*/, "./Planar1D.h", 6,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &GEFICA_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void GEFICA_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOTDict {
   void GEFICAcLcLDetector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void GEFICAcLcLDetector_Dictionary();
   static void *new_GEFICAcLcLDetector(void *p = 0);
   static void *newArray_GEFICAcLcLDetector(Long_t size, void *p);
   static void delete_GEFICAcLcLDetector(void *p);
   static void deleteArray_GEFICAcLcLDetector(void *p);
   static void destruct_GEFICAcLcLDetector(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::GEFICA::Detector*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::GEFICA::Detector) == sizeof( ::ROOTShadow::Shadow::GEFICA::Detector));
      ::GEFICA::Detector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::GEFICA::Detector),0);
      static ::ROOT::TGenericClassInfo 
         instance("GEFICA::Detector", "./Detector.h", 11,
                  typeid(::GEFICA::Detector), ::ROOT::DefineBehavior(ptr, ptr),
                  &GEFICAcLcLDetector_ShowMembers, &GEFICAcLcLDetector_Dictionary, isa_proxy, 4,
                  sizeof(::GEFICA::Detector) );
      instance.SetNew(&new_GEFICAcLcLDetector);
      instance.SetNewArray(&newArray_GEFICAcLcLDetector);
      instance.SetDelete(&delete_GEFICAcLcLDetector);
      instance.SetDeleteArray(&deleteArray_GEFICAcLcLDetector);
      instance.SetDestructor(&destruct_GEFICAcLcLDetector);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::GEFICA::Detector*)
   {
      return GenerateInitInstanceLocal((::GEFICA::Detector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GEFICA::Detector*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void GEFICAcLcLDetector_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::GEFICA::Detector*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void GEFICAcLcLField_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_GEFICAcLcLField(void *p);
   static void deleteArray_GEFICAcLcLField(void *p);
   static void destruct_GEFICAcLcLField(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::GEFICA::Field*)
   {
      ::GEFICA::Field *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GEFICA::Field >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GEFICA::Field", ::GEFICA::Field::Class_Version(), "./Field.h", 16,
                  typeid(::GEFICA::Field), ::ROOT::DefineBehavior(ptr, ptr),
                  &::GEFICA::Field::Dictionary, isa_proxy, 4,
                  sizeof(::GEFICA::Field) );
      instance.SetDelete(&delete_GEFICAcLcLField);
      instance.SetDeleteArray(&deleteArray_GEFICAcLcLField);
      instance.SetDestructor(&destruct_GEFICAcLcLField);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::GEFICA::Field*)
   {
      return GenerateInitInstanceLocal((::GEFICA::Field*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GEFICA::Field*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void GEFICAcLcLTrueCoaxial_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void GEFICAcLcLTrueCoaxial_Dictionary();
   static void delete_GEFICAcLcLTrueCoaxial(void *p);
   static void deleteArray_GEFICAcLcLTrueCoaxial(void *p);
   static void destruct_GEFICAcLcLTrueCoaxial(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::GEFICA::TrueCoaxial*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::GEFICA::TrueCoaxial) == sizeof( ::ROOTShadow::Shadow::GEFICA::TrueCoaxial));
      ::GEFICA::TrueCoaxial *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::GEFICA::TrueCoaxial),0);
      static ::ROOT::TGenericClassInfo 
         instance("GEFICA::TrueCoaxial", "./TrueCoaxial.h", 9,
                  typeid(::GEFICA::TrueCoaxial), ::ROOT::DefineBehavior(ptr, ptr),
                  &GEFICAcLcLTrueCoaxial_ShowMembers, &GEFICAcLcLTrueCoaxial_Dictionary, isa_proxy, 4,
                  sizeof(::GEFICA::TrueCoaxial) );
      instance.SetDelete(&delete_GEFICAcLcLTrueCoaxial);
      instance.SetDeleteArray(&deleteArray_GEFICAcLcLTrueCoaxial);
      instance.SetDestructor(&destruct_GEFICAcLcLTrueCoaxial);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::GEFICA::TrueCoaxial*)
   {
      return GenerateInitInstanceLocal((::GEFICA::TrueCoaxial*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GEFICA::TrueCoaxial*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void GEFICAcLcLTrueCoaxial_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::GEFICA::TrueCoaxial*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void GEFICAcLcLPlanar1D_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_GEFICAcLcLPlanar1D(void *p);
   static void deleteArray_GEFICAcLcLPlanar1D(void *p);
   static void destruct_GEFICAcLcLPlanar1D(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::GEFICA::Planar1D*)
   {
      ::GEFICA::Planar1D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GEFICA::Planar1D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GEFICA::Planar1D", ::GEFICA::Planar1D::Class_Version(), "./Planar1D.h", 9,
                  typeid(::GEFICA::Planar1D), ::ROOT::DefineBehavior(ptr, ptr),
                  &::GEFICA::Planar1D::Dictionary, isa_proxy, 4,
                  sizeof(::GEFICA::Planar1D) );
      instance.SetDelete(&delete_GEFICAcLcLPlanar1D);
      instance.SetDeleteArray(&deleteArray_GEFICAcLcLPlanar1D);
      instance.SetDestructor(&destruct_GEFICAcLcLPlanar1D);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::GEFICA::Planar1D*)
   {
      return GenerateInitInstanceLocal((::GEFICA::Planar1D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GEFICA::Planar1D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

      namespace GEFICA {
//______________________________________________________________________________
atomic_TClass_ptr Field::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Field::Class_Name()
{
   return "GEFICA::Field";
}

//______________________________________________________________________________
const char *Field::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::GEFICA::Field*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Field::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::GEFICA::Field*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Field::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::GEFICA::Field*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Field::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::GEFICA::Field*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace GEFICA
      namespace GEFICA {
//______________________________________________________________________________
atomic_TClass_ptr Planar1D::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Planar1D::Class_Name()
{
   return "GEFICA::Planar1D";
}

//______________________________________________________________________________
const char *Planar1D::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::GEFICA::Planar1D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Planar1D::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::GEFICA::Planar1D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Planar1D::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::GEFICA::Planar1D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Planar1D::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::GEFICA::Planar1D*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace GEFICA
      namespace GEFICA {
//______________________________________________________________________________
void Field::Streamer(TBuffer &R__b)
{
   // Stream an object of class GEFICA::Field.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(GEFICA::Field::Class(),this);
   } else {
      R__b.WriteClassBuffer(GEFICA::Field::Class(),this);
   }
}

} // namespace GEFICA
//______________________________________________________________________________
      namespace GEFICA {
void Field::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class GEFICA::Field.
      TClass *R__cl = ::GEFICA::Field::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MaxIterations", &MaxIterations);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n", &n);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*isbegin", &isbegin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*E1", &E1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*C1", &C1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*P", &P);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*StepNext", &StepNext);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*StepBefore", &StepBefore);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Impurity", &Impurity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Csor", &Csor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E0", &E0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ER", &ER);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "XUpSum", &XUpSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "XDownSum", &XDownSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Xlimit", &Xlimit);
      TObject::ShowMembers(R__insp);
}

} // namespace GEFICA
namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_GEFICAcLcLField(void *p) {
      delete ((::GEFICA::Field*)p);
   }
   static void deleteArray_GEFICAcLcLField(void *p) {
      delete [] ((::GEFICA::Field*)p);
   }
   static void destruct_GEFICAcLcLField(void *p) {
      typedef ::GEFICA::Field current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::GEFICA::Field

      namespace GEFICA {
//______________________________________________________________________________
void Planar1D::Streamer(TBuffer &R__b)
{
   // Stream an object of class GEFICA::Planar1D.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(GEFICA::Planar1D::Class(),this);
   } else {
      R__b.WriteClassBuffer(GEFICA::Planar1D::Class(),this);
   }
}

} // namespace GEFICA
//______________________________________________________________________________
      namespace GEFICA {
void Planar1D::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class GEFICA::Planar1D.
      TClass *R__cl = ::GEFICA::Planar1D::IsA();
      if (R__cl || R__insp.IsA()) { }
      //This works around a msvc bug and should be harmless on other platforms
      typedef GEFICA::Field baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace GEFICA
namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_GEFICAcLcLPlanar1D(void *p) {
      delete ((::GEFICA::Planar1D*)p);
   }
   static void deleteArray_GEFICAcLcLPlanar1D(void *p) {
      delete [] ((::GEFICA::Planar1D*)p);
   }
   static void destruct_GEFICAcLcLPlanar1D(void *p) {
      typedef ::GEFICA::Planar1D current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::GEFICA::Planar1D

//______________________________________________________________________________
namespace ROOTDict {
   void GEFICAcLcLDetector_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class GEFICA::Detector.
      typedef ::ROOTShadow::Shadow::GEFICA::Detector ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::GEFICA::Detector*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "voltage", &sobj->voltage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*impurity", &sobj->impurity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*field", &sobj->field);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_GEFICAcLcLDetector(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::GEFICA::Detector : new ::GEFICA::Detector;
   }
   static void *newArray_GEFICAcLcLDetector(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::GEFICA::Detector[nElements] : new ::GEFICA::Detector[nElements];
   }
   // Wrapper around operator delete
   static void delete_GEFICAcLcLDetector(void *p) {
      delete ((::GEFICA::Detector*)p);
   }
   static void deleteArray_GEFICAcLcLDetector(void *p) {
      delete [] ((::GEFICA::Detector*)p);
   }
   static void destruct_GEFICAcLcLDetector(void *p) {
      typedef ::GEFICA::Detector current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::GEFICA::Detector

//______________________________________________________________________________
namespace ROOTDict {
   void GEFICAcLcLTrueCoaxial_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class GEFICA::TrueCoaxial.
      typedef ::ROOTShadow::Shadow::GEFICA::TrueCoaxial ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::GEFICA::TrueCoaxial*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ri", &sobj->ri);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ro", &sobj->ro);
      R__insp.GenericShowMembers("GEFICA::Detector", ( ::GEFICA::Detector * )( (::GEFICA::TrueCoaxial*) obj ), false);
   }

}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_GEFICAcLcLTrueCoaxial(void *p) {
      delete ((::GEFICA::TrueCoaxial*)p);
   }
   static void deleteArray_GEFICAcLcLTrueCoaxial(void *p) {
      delete [] ((::GEFICA::TrueCoaxial*)p);
   }
   static void destruct_GEFICAcLcLTrueCoaxial(void *p) {
      typedef ::GEFICA::TrueCoaxial current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::GEFICA::TrueCoaxial

/********************************************************
* GEFICA.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableGEFICA();

extern "C" void G__set_cpp_environmentGEFICA() {
  G__cpp_reset_tagtableGEFICA();
}
#include <new>
extern "C" int G__cpp_dllrevGEFICA() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* GEFICA */

/* GEFICA::Detector */
static int G__GEFICA_170_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GEFICA::Detector* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GEFICA::Detector[n];
     } else {
       p = new((void*) gvp) GEFICA::Detector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GEFICA::Detector;
     } else {
       p = new((void*) gvp) GEFICA::Detector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_170_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GEFICA::Detector*) G__getstructoffset())->UpdateField();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GEFICA_170_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GEFICA::Detector* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GEFICA::Detector(*(GEFICA::Detector*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GEFICA::Detector G__TGEFICAcLcLDetector;
static int G__GEFICA_170_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GEFICA::Detector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GEFICA::Detector*) (soff+(sizeof(GEFICA::Detector)*i)))->~G__TGEFICAcLcLDetector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GEFICA::Detector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GEFICA::Detector*) (soff))->~G__TGEFICAcLcLDetector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GEFICA_170_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GEFICA::Detector* dest = (GEFICA::Detector*) G__getstructoffset();
   *dest = *(GEFICA::Detector*) libp->para[0].ref;
   const GEFICA::Detector& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* GEFICA::Field */
static int G__GEFICA_171_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GEFICA::Field* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new GEFICA::Field((int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) GEFICA::Field((int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLField));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_171_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GEFICA::Field*) G__getstructoffset())->Create((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_171_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((GEFICA::Field*) G__getstructoffset())->Iterate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_171_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GEFICA::Field*) G__getstructoffset())->Update((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_171_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((GEFICA::Field*) G__getstructoffset())->Save((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((GEFICA::Field*) G__getstructoffset())->Save();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_171_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((GEFICA::Field*) G__getstructoffset())->Load((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((GEFICA::Field*) G__getstructoffset())->Load();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_171_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GEFICA::Field*) G__getstructoffset())->SetImpurity((TF1*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_171_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GEFICA::Field*) G__getstructoffset())->FindIdx((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_171_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((GEFICA::Field*) G__getstructoffset())->GetData((double) G__double(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_171_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GEFICA::Field::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_171_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GEFICA::Field::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_171_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GEFICA::Field::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_171_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GEFICA::Field::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_171_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GEFICA::Field*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_171_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GEFICA::Field::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_171_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GEFICA::Field::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_171_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GEFICA::Field::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_171_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GEFICA::Field::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GEFICA_171_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GEFICA::Field* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GEFICA::Field(*(GEFICA::Field*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLField));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GEFICA::Field G__TGEFICAcLcLField;
static int G__GEFICA_171_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GEFICA::Field*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GEFICA::Field*) (soff+(sizeof(GEFICA::Field)*i)))->~G__TGEFICAcLcLField();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GEFICA::Field*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GEFICA::Field*) (soff))->~G__TGEFICAcLcLField();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GEFICA_171_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GEFICA::Field* dest = (GEFICA::Field*) G__getstructoffset();
   *dest = *(GEFICA::Field*) libp->para[0].ref;
   const GEFICA::Field& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* GEFICA::TrueCoaxial */
static int G__GEFICA_172_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GEFICA::TrueCoaxial* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new GEFICA::TrueCoaxial((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) GEFICA::TrueCoaxial((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLTrueCoaxial));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GEFICA_172_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GEFICA::TrueCoaxial* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GEFICA::TrueCoaxial(*(GEFICA::TrueCoaxial*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLTrueCoaxial));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GEFICA::TrueCoaxial G__TGEFICAcLcLTrueCoaxial;
static int G__GEFICA_172_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GEFICA::TrueCoaxial*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GEFICA::TrueCoaxial*) (soff+(sizeof(GEFICA::TrueCoaxial)*i)))->~G__TGEFICAcLcLTrueCoaxial();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GEFICA::TrueCoaxial*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GEFICA::TrueCoaxial*) (soff))->~G__TGEFICAcLcLTrueCoaxial();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GEFICA_172_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GEFICA::TrueCoaxial* dest = (GEFICA::TrueCoaxial*) G__getstructoffset();
   *dest = *(GEFICA::TrueCoaxial*) libp->para[0].ref;
   const GEFICA::TrueCoaxial& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* GEFICA::Planar1D */
static int G__GEFICA_592_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GEFICA::Planar1D* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new GEFICA::Planar1D((int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) GEFICA::Planar1D((int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLPlanar1D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_592_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GEFICA::Planar1D*) G__getstructoffset())->SetVoltage((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_592_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GEFICA::Planar1D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_592_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GEFICA::Planar1D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_592_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GEFICA::Planar1D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_592_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GEFICA::Planar1D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_592_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GEFICA::Planar1D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_592_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GEFICA::Planar1D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_592_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GEFICA::Planar1D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_592_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GEFICA::Planar1D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GEFICA_592_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GEFICA::Planar1D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GEFICA_592_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GEFICA::Planar1D* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GEFICA::Planar1D(*(GEFICA::Planar1D*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLPlanar1D));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GEFICA::Planar1D G__TGEFICAcLcLPlanar1D;
static int G__GEFICA_592_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GEFICA::Planar1D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GEFICA::Planar1D*) (soff+(sizeof(GEFICA::Planar1D)*i)))->~G__TGEFICAcLcLPlanar1D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GEFICA::Planar1D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GEFICA::Planar1D*) (soff))->~G__TGEFICAcLcLPlanar1D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GEFICA_592_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GEFICA::Planar1D* dest = (GEFICA::Planar1D*) G__getstructoffset();
   *dest = *(GEFICA::Planar1D*) libp->para[0].ref;
   const GEFICA::Planar1D& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* GEFICA */

/* GEFICA::Detector */

/* GEFICA::Field */

/* GEFICA::TrueCoaxial */

/* GEFICA::Planar1D */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncGEFICA {
 public:
  G__Sizep2memfuncGEFICA(): p(&G__Sizep2memfuncGEFICA::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncGEFICA::*p)();
};

size_t G__get_sizep2memfuncGEFICA()
{
  G__Sizep2memfuncGEFICA a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceGEFICA() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLField))) {
     GEFICA::Field *G__Lderived;
     G__Lderived=(GEFICA::Field*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLField),G__get_linked_tagnum(&G__GEFICALN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLTrueCoaxial))) {
     GEFICA::TrueCoaxial *G__Lderived;
     G__Lderived=(GEFICA::TrueCoaxial*)0x1000;
     {
       GEFICA::Detector *G__Lpbase=(GEFICA::Detector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLTrueCoaxial),G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLPlanar1D))) {
     GEFICA::Planar1D *G__Lderived;
     G__Lderived=(GEFICA::Planar1D*)0x1000;
     {
       GEFICA::Field *G__Lpbase=(GEFICA::Field*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLPlanar1D),G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLField),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLPlanar1D),G__get_linked_tagnum(&G__GEFICALN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableGEFICA() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__GEFICALN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GEFICALN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GEFICALN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GEFICALN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GEFICALN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__GEFICALN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GEFICALN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GEFICALN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GEFICALN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GEFICALN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__GEFICALN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__GEFICALN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__GEFICALN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__GEFICALN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__GEFICALN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__GEFICALN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__GEFICALN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__GEFICALN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__GEFICALN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__GEFICALN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__GEFICALN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__GEFICALN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__GEFICALN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__GEFICALN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__GEFICALN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__GEFICALN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__GEFICALN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__GEFICALN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__GEFICALN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__GEFICALN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__GEFICALN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__GEFICALN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__GEFICALN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__GEFICALN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__GEFICALN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__GEFICALN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__GEFICALN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__GEFICALN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__GEFICALN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__GEFICALN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSym<Double_t>",117,G__get_linked_tagnum(&G__GEFICALN_TMatrixTSymlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparse<Double_t>",117,G__get_linked_tagnum(&G__GEFICALN_TMatrixTSparselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* GEFICA */
static void G__setup_memvarGEFICA(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GEFICALN_GEFICA));
   {
   }
   G__tag_memvar_reset();
}


   /* GEFICA::Detector */
static void G__setup_memvarGEFICAcLcLDetector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLDetector));
   { GEFICA::Detector *p; p=(GEFICA::Detector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->voltage)-(long)(p)),100,0,0,-1,-1,-1,1,"voltage=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->impurity)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GEFICALN_TF1),-1,-1,1,"impurity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->field)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLField),-1,-1,1,"field=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* GEFICA::Field */
static void G__setup_memvarGEFICAcLcLField(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLField));
   { GEFICA::Field *p; p=(GEFICA::Field*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),105,0,0,-1,-1,-1,1,"x=",0,"number of steps along the 1st axis");
   G__memvar_setup((void*)((long)(&p->MaxIterations)-(long)(p)),105,0,0,-1,-1,-1,1,"MaxIterations=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->n)-(long)(p)),105,0,0,-1,-1,-1,1,"n=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isbegin)-(long)(p)),71,0,0,-1,-1,-1,1,"isbegin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E1)-(long)(p)),68,0,0,-1,-1,-1,1,"E1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->C1)-(long)(p)),68,0,0,-1,-1,-1,1,"C1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->P)-(long)(p)),68,0,0,-1,-1,-1,1,"P=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->StepNext)-(long)(p)),68,0,0,-1,-1,-1,1,"StepNext=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->StepBefore)-(long)(p)),68,0,0,-1,-1,-1,1,"StepBefore=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Impurity)-(long)(p)),68,0,0,-1,-1,-1,1,"Impurity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Csor)-(long)(p)),100,0,0,-1,-1,-1,1,"Csor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E0)-(long)(p)),100,0,0,-1,-1,-1,1,"E0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ER)-(long)(p)),100,0,0,-1,-1,-1,1,"ER=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->XUpSum)-(long)(p)),100,0,0,-1,-1,-1,1,"XUpSum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->XDownSum)-(long)(p)),100,0,0,-1,-1,-1,1,"XDownSum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Xlimit)-(long)(p)),100,0,0,-1,-1,-1,1,"Xlimit=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GEFICALN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* GEFICA::TrueCoaxial */
static void G__setup_memvarGEFICAcLcLTrueCoaxial(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLTrueCoaxial));
   { GEFICA::TrueCoaxial *p; p=(GEFICA::TrueCoaxial*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ri)-(long)(p)),100,0,0,-1,-1,-1,1,"ri=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ro)-(long)(p)),100,0,0,-1,-1,-1,1,"ro=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* GEFICA::Planar1D */
static void G__setup_memvarGEFICAcLcLPlanar1D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLPlanar1D));
   { GEFICA::Planar1D *p; p=(GEFICA::Planar1D*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GEFICALN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarGEFICA() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncGEFICA(void) {
   /* GEFICA */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GEFICALN_GEFICA));
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGEFICAcLcLDetector(void) {
   /* GEFICA::Detector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLDetector));
   G__memfunc_setup("Detector",826,G__GEFICA_170_0_1, 105, G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLDetector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateField",1095,G__GEFICA_170_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Detector", 826, G__GEFICA_170_0_3, (int) ('i'), G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLDetector), -1, 0, 1, 1, 1, 0, "u 'GEFICA::Detector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Detector", 952, G__GEFICA_170_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GEFICA_170_0_5, (int) ('u'), G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLDetector), -1, 1, 1, 1, 1, 0, "u 'GEFICA::Detector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGEFICAcLcLField(void) {
   /* GEFICA::Field */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLField));
   G__memfunc_setup("Field",484,G__GEFICA_171_0_1, 105, G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLField), -1, 0, 1, 1, 1, 0, "i - - 0 - ix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Create",596,G__GEFICA_171_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - steplength", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Iterate",718,G__GEFICA_171_0_3, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Update",611,G__GEFICA_171_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - idx", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Save",399,G__GEFICA_171_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '0' fout", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Load",384,G__GEFICA_171_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '0' fin", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetImpurity",1167,G__GEFICA_171_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TF1' - 0 - Im", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindIdx",678,G__GEFICA_171_0_8, 105, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - tarx i - - 0 - begin "
"i - - 0 - end", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetData",666,G__GEFICA_171_0_9, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - tarx i - - 0 - thing", "1:Ex 2:f 0:Impurty", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GEFICA_171_0_10, 85, G__get_linked_tagnum(&G__GEFICALN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GEFICA::Field::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GEFICA_171_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GEFICA::Field::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GEFICA_171_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GEFICA::Field::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GEFICA_171_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GEFICA::Field::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GEFICALN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GEFICA_171_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GEFICA_171_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GEFICA::Field::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GEFICA_171_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GEFICA::Field::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GEFICA_171_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GEFICA::Field::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GEFICA_171_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GEFICA::Field::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Field", 484, G__GEFICA_171_0_22, (int) ('i'), G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLField), -1, 0, 1, 1, 1, 0, "u 'GEFICA::Field' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Field", 610, G__GEFICA_171_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GEFICA_171_0_24, (int) ('u'), G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLField), -1, 1, 1, 1, 1, 0, "u 'GEFICA::Field' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGEFICAcLcLTrueCoaxial(void) {
   /* GEFICA::TrueCoaxial */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLTrueCoaxial));
   G__memfunc_setup("TrueCoaxial",1121,G__GEFICA_172_0_1, 105, G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLTrueCoaxial), -1, 0, 2, 1, 1, 0, 
"d - - 0 - ri d - - 0 - ro", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TrueCoaxial", 1121, G__GEFICA_172_0_2, (int) ('i'), G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLTrueCoaxial), -1, 0, 1, 1, 1, 0, "u 'GEFICA::TrueCoaxial' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TrueCoaxial", 1247, G__GEFICA_172_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GEFICA_172_0_4, (int) ('u'), G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLTrueCoaxial), -1, 1, 1, 1, 1, 0, "u 'GEFICA::TrueCoaxial' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGEFICAcLcLPlanar1D(void) {
   /* GEFICA::Planar1D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLPlanar1D));
   G__memfunc_setup("Planar1D",723,G__GEFICA_592_0_1, 105, G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLPlanar1D), -1, 0, 1, 1, 1, 0, "i - - 0 - ix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVoltage",1022,G__GEFICA_592_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - voltage", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GEFICA_592_0_3, 85, G__get_linked_tagnum(&G__GEFICALN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GEFICA::Planar1D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GEFICA_592_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GEFICA::Planar1D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GEFICA_592_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GEFICA::Planar1D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GEFICA_592_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GEFICA::Planar1D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GEFICALN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GEFICA_592_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GEFICA_592_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GEFICA::Planar1D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GEFICA_592_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GEFICA::Planar1D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GEFICA_592_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GEFICA::Planar1D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GEFICA_592_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GEFICA::Planar1D::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Planar1D", 723, G__GEFICA_592_0_15, (int) ('i'), G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLPlanar1D), -1, 0, 1, 1, 1, 0, "u 'GEFICA::Planar1D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Planar1D", 849, G__GEFICA_592_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GEFICA_592_0_17, (int) ('u'), G__get_linked_tagnum(&G__GEFICALN_GEFICAcLcLPlanar1D), -1, 1, 1, 1, 1, 0, "u 'GEFICA::Planar1D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncGEFICA() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalGEFICA() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcGEFICA() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__GEFICALN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__GEFICALN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__GEFICALN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__GEFICALN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__GEFICALN_GEFICA = { "GEFICA" , 110 , -1 };
G__linked_taginfo G__GEFICALN_GEFICAcLcLDetector = { "GEFICA::Detector" , 99 , -1 };
G__linked_taginfo G__GEFICALN_GEFICAcLcLField = { "GEFICA::Field" , 99 , -1 };
G__linked_taginfo G__GEFICALN_GEFICAcLcLTrueCoaxial = { "GEFICA::TrueCoaxial" , 99 , -1 };
G__linked_taginfo G__GEFICALN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__GEFICALN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TMatrixTSymlEdoublegR = { "TMatrixTSym<double>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TMatrixTSparselEdoublegR = { "TMatrixTSparse<double>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__GEFICALN_GEFICAcLcLPlanar1D = { "GEFICA::Planar1D" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableGEFICA() {
  G__GEFICALN_TClass.tagnum = -1 ;
  G__GEFICALN_TBuffer.tagnum = -1 ;
  G__GEFICALN_TMemberInspector.tagnum = -1 ;
  G__GEFICALN_TObject.tagnum = -1 ;
  G__GEFICALN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__GEFICALN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GEFICALN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__GEFICALN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GEFICALN_TF1.tagnum = -1 ;
  G__GEFICALN_GEFICA.tagnum = -1 ;
  G__GEFICALN_GEFICAcLcLDetector.tagnum = -1 ;
  G__GEFICALN_GEFICAcLcLField.tagnum = -1 ;
  G__GEFICALN_GEFICAcLcLTrueCoaxial.tagnum = -1 ;
  G__GEFICALN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__GEFICALN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__GEFICALN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__GEFICALN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__GEFICALN_TVectorTlEfloatgR.tagnum = -1 ;
  G__GEFICALN_TVectorTlEdoublegR.tagnum = -1 ;
  G__GEFICALN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__GEFICALN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__GEFICALN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__GEFICALN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__GEFICALN_TMatrixTSymlEdoublegR.tagnum = -1 ;
  G__GEFICALN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__GEFICALN_TMatrixTSparselEdoublegR.tagnum = -1 ;
  G__GEFICALN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__GEFICALN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__GEFICALN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__GEFICALN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__GEFICALN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__GEFICALN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__GEFICALN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__GEFICALN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__GEFICALN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__GEFICALN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__GEFICALN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__GEFICALN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__GEFICALN_GEFICAcLcLPlanar1D.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableGEFICA() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__GEFICALN_TClass);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TBuffer);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TObject);
   G__get_linked_tagnum_fwd(&G__GEFICALN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TF1);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GEFICALN_GEFICA),0,-1,0,(char*)NULL,G__setup_memvarGEFICA,G__setup_memfuncGEFICA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GEFICALN_GEFICAcLcLDetector),sizeof(GEFICA::Detector),-1,263424,(char*)NULL,G__setup_memvarGEFICAcLcLDetector,G__setup_memfuncGEFICAcLcLDetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GEFICALN_GEFICAcLcLField),sizeof(GEFICA::Field),-1,324608,(char*)NULL,G__setup_memvarGEFICAcLcLField,G__setup_memfuncGEFICAcLcLField);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GEFICALN_GEFICAcLcLTrueCoaxial),sizeof(GEFICA::TrueCoaxial),-1,295936,(char*)NULL,G__setup_memvarGEFICAcLcLTrueCoaxial,G__setup_memfuncGEFICAcLcLTrueCoaxial);
   G__get_linked_tagnum_fwd(&G__GEFICALN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TMatrixTSymlEdoublegR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TMatrixTSparselEdoublegR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__GEFICALN_TMatrixTSparseDiaglEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GEFICALN_GEFICAcLcLPlanar1D),sizeof(GEFICA::Planar1D),-1,323584,(char*)NULL,G__setup_memvarGEFICAcLcLPlanar1D,G__setup_memfuncGEFICAcLcLPlanar1D);
}
extern "C" void G__cpp_setupGEFICA(void) {
  G__check_setup_version(30051515,"G__cpp_setupGEFICA()");
  G__set_cpp_environmentGEFICA();
  G__cpp_setup_tagtableGEFICA();

  G__cpp_setup_inheritanceGEFICA();

  G__cpp_setup_typetableGEFICA();

  G__cpp_setup_memvarGEFICA();

  G__cpp_setup_memfuncGEFICA();
  G__cpp_setup_globalGEFICA();
  G__cpp_setup_funcGEFICA();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncGEFICA();
  return;
}
class G__cpp_setup_initGEFICA {
  public:
    G__cpp_setup_initGEFICA() { G__add_setup_func("GEFICA",(G__incsetup)(&G__cpp_setupGEFICA)); G__call_setup_funcs(); }
   ~G__cpp_setup_initGEFICA() { G__remove_setup_func("GEFICA"); }
};
G__cpp_setup_initGEFICA G__cpp_setup_initializerGEFICA;

